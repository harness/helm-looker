apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{ include "app.name" . }}'
  namespace: '{{ .Release.Namespace }}'
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  progressDeadlineSeconds: 300
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{.Values.maxSurge}}
      maxUnavailable: {{.Values.maxUnavailable}}
  selector:
    matchLabels:
      {{- include "app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        podAffinity: looker-app
        {{- include "app.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "app.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: 30
      initContainers:
        - name: looker-data-ownership-grant
          image: ubuntu:20.04
          command:
            - 'sh'
            - '-c'
            - 'chown -R {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.runAsUser }} "{{ .Values.modelsDirectory }}" "/home/looker/looker/.db"'
          volumeMounts:
            - name: lookerfiles
              mountPath: {{ .Values.modelsDirectory }}
            - name: looker-db
              mountPath: /home/looker/looker/.db
      containers:
        - name: '{{ include "app.name" . }}'
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
              {{- toYaml .Values.securityContext | nindent 12 }}
          ports:
          - name: looker-web
            containerPort: 9999
            protocol: "TCP"
          - name: looker-api
            containerPort: 19999
            protocol: "TCP"
          resources:
              {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.lookerSecrets.licenseKey.name }}
                  key: {{ .Values.lookerSecrets.licenseKey.key }}
            - name: LKR_MASTER_KEY_ENV
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.lookerSecrets.masterKey.name }}
                  key: {{ .Values.lookerSecrets.masterKey.key }}
            - name: CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.lookerSecrets.clientSecret.name }}
                  key: {{ .Values.lookerSecrets.clientSecret.key }}
            - name: CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.lookerSecrets.clientId.name }}
                  key: {{ .Values.lookerSecrets.clientId.key }}
            - name: TIMESCALE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.timescaleSecrets.password.name }}
                  key: {{ .Values.timescaleSecrets.password.key }}
            - name: REDSHIFT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redshiftSecrets.password.name }}
                  key: {{ .Values.redshiftSecrets.password.key }}
          envFrom:
          - configMapRef:
              name: '{{ include "app.name" . }}'
          readinessProbe:
            httpGet:
              path: /alive
              port: looker-api
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 5
            failureThreshold: 8
          livenessProbe:
            httpGet:
              path: /alive
              port: looker-api
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 10
            failureThreshold: 20
          volumeMounts:
            - name: looker-startup
              mountPath: /home/looker/looker/lookerstart.cfg
              subPath: lookerstart.cfg
            - name: lookerfiles
              mountPath: {{ .Values.modelsDirectory }}
            - name: looker-db
              mountPath: /home/looker/looker/.db
      volumes:
        - name: looker-startup
          configMap:
            defaultMode: 420
            name: looker-startup-options
            items:
              - key: lookerstart.cfg
                path: lookerstart.cfg
        - name: lookerfiles
          persistentVolumeClaim:
            claimName: lookerfiles
            readOnly: false
        - name: looker-db
          persistentVolumeClaim:
            claimName: looker-db
            readOnly: false
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - '{{ include "app.name" . }}'
            topologyKey: "kubernetes.io/hostname"
      {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
